package by.tc.task02.dao.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import by.tc.task02.dao.EntityDAO;
import by.tc.task02.entity.Entity;

public class EntityDAOImpl implements EntityDAO {
	
	
	private static final String emptyString = "";
	private static final String openingTagPattern = "<(([a-z-A-Z_:]+)([^><]*))>";
	private static final String closingTagPattern = "</(([a-z-A-Z_:]+)([^><]*))>";
	private static final String characterPattern = ">(.*)<";
	private static final String characterPatternStart = ">(.*)$";
	private static final String characterPatternEnd = "^([^<]+)<";
	private static final String separators = "[ \\t\\n\\x0B\\f\\r]";
	

	private boolean isLineContainOpeningTag(String line){
		Pattern patternOpeningTag = Pattern.compile(openingTagPattern,Pattern.DOTALL);
		Matcher matcherOpeningTag = patternOpeningTag.matcher(line);
		if(matcherOpeningTag.find()&&!matcherOpeningTag.group(1).isEmpty()){
			return true;
		}
		return false;
		
	}
 	private Entity getNewEntity(BufferedReader bufferedReader, String line,int level,String oldName){
		level++;
		String name = null;
		Entity entity = new Entity();
		while(!line.isEmpty()&&!line.equals(" ")){
			
			//// while exist <>
			//if(entity.getName().isEmpty()){
			Pattern patternOpeningTag = Pattern.compile(openingTagPattern,Pattern.DOTALL);
			Matcher matcherOpeningTag = patternOpeningTag.matcher(line);
			System.out.println(level);
			System.out.println(line+ " 1 line");
			Entity oldEntity = new Entity();
		//// while exist <> in this line
			while(matcherOpeningTag.find()&&!matcherOpeningTag.group(1).isEmpty()){
				
				/////name
				name = matcherOpeningTag.group(2);
				String attributesString = matcherOpeningTag.group(3);
				if(!name.isEmpty()){
					if(!entity.getName().isEmpty()){
						oldEntity = new Entity(entity);
						//entity = new Entity();
					}
					line = addDataToEntity(bufferedReader, line, name, entity,
							attributesString);
					
					if(closeTag(line,entity.getName())){
						System.out.println(entity + " close  ");
						if(oldEntity.isEmpty())
						{
							oldEntity.setNewEntity(entity);
							return oldEntity;
						}
						return entity;
					}
					
					System.out.println(line + " befor new line ");
					System.out.println(entity + " befor new line ");
					
					line = goToNextLine(bufferedReader, line);
					
					System.out.println(line + " after new line ");
					System.out.println(entity + " after new line ");
					
					if(isLineContainOpeningTag(line)){
						Entity newEntity = getNewEntity(bufferedReader,line,level,name);
						System.out.println(newEntity +"newEntity\n "+line+" "+ "newEntity ");
							if(newEntity.getName()!=null){
								System.out.println(entity + "oldEntity");
								entity.setNewEntity(newEntity);
								System.out.println(entity + "oldEntity+newEntity");
							}	
							
						System.out.println(line + " befor deleted ");
						System.out.println(entity + " befor deleted ");
						line = remove(line, newEntity, bufferedReader);
						
						System.out.println(line + " after deleted " );
						System.out.println(entity + " after deleted " );
						
						line = goToNextLine(bufferedReader, line);
					}
					System.out.println(entity + " after all" );
					System.out.println(line + " after all  ");
				}
				System.out.println(line + "  afterall4  ");
			}			
		}
 	//}
		System.out.println(entity + " befor return");
		entity = null;
		return entity;
	}
	private String addDataToEntity(BufferedReader bufferedReader, String line,
			String name, Entity entity, String attributesString) {
		entity.setName(name);
		
		/////  attributes
		if(!attributesString.isEmpty()){
			line = addAttributes(line, entity, attributesString);
		}
		
		////character
		line = addCharacter(line, entity, bufferedReader);
		///end
		
		System.out.println(line + " after adds ");
		System.out.println(entity + " after adds ");
		return line;
	}
	private String goToNextLine(BufferedReader bufferedReader, String line) {
		while(line.isEmpty()||line.equals(separators)){
			System.out.println(line + "     old line  ");
			line = toNextLine(bufferedReader);
			System.out.println(line + "      new line  ");
		}
		System.out.println(line + "new line  ");
		return line;
	}
	private boolean closeTag(String line, String Name) {
		System.out.println("  line without spases"+line.replaceAll(separators, emptyString));
		Pattern patternCloseTag = Pattern.compile(closingTagPattern);
		Matcher matcherCloseTag = patternCloseTag.matcher(line.replaceAll(separators, emptyString));
		if((matcherCloseTag.find())){
			System.out.println(matcherCloseTag.group(1)+" "+Name);
			if(matcherCloseTag.group(1).equals(Name)){
			System.out.println("closing tag");
			return true;
			}
			else{
				line = line.replace(closingTagPattern, emptyString);
				return false;
			}
		}
		return false;
	}
	private void addOneAttribute(HashMap<String,String> attributesMap,int i, String[]attributes) {
		int j = i+1;
		String attribute1 = attributes[i];
		String space = " ";
		if(attribute1.isEmpty()||attribute1.equals(space)){
			return;
		}
		String attribute2 = attributes[j];
		while(attribute2.isEmpty()||attribute2.equals(space)){
			j++;
			attribute2 = attributes[j];
		}
		attributesMap.put(attribute1, attribute2);
	}
	private String addAttributes(String line, Entity entity,String attributesString) {
		String separator = "[=\"]";
		HashMap<String,String> attributesMap = new HashMap<String, String>();
		String[]attributes = attributesString.split(separator);
		System.out.println(attributesString);
		int countOfAttributes = attributes.length-1;
		int step = 2;
		for (int i =0;i<countOfAttributes;i+=step){
			addOneAttribute(attributesMap,i,attributes);
			entity.setAttributes(attributesMap);
		}
		System.out.println(entity);
		return line;
	}
	private String addCharacter(String line, Entity entity,BufferedReader bufferedReader) {
		Pattern patternCharacter = Pattern.compile(characterPattern,Pattern.DOTALL);
		Matcher matcherCharacter = patternCharacter.matcher(line);
		if(matcherCharacter.find()){
			line = simpleAddCharacter(line, entity, matcherCharacter);
		}else{
			line = addCharacterFromNewLine(line, entity, bufferedReader);
		}
		return line;
	}
	private String addCharacterFromNewLine(String line, Entity entity, BufferedReader bufferedReader) {
		Pattern patternCharacter;
		Matcher matcherCharacter;
		patternCharacter = Pattern.compile(characterPatternStart,Pattern.DOTALL);
		matcherCharacter = patternCharacter.matcher(line);
		if(matcherCharacter.find()){
			int groupOfCharacter =1;
			String character = matcherCharacter.group(groupOfCharacter);
			line = addLinesToCharacter(entity, bufferedReader, character, line );
		}
		return line;
	}
	private String addLinesToCharacter(Entity entity, BufferedReader bufferedReader, String character,String line) {
		Pattern patternCharacter;
		Matcher matcherCharacter;
		patternCharacter = Pattern.compile(characterPatternEnd,Pattern.DOTALL);
		matcherCharacter = patternCharacter.matcher(line);
			while(!matcherCharacter.find()){
				System.out.println(line);
				line = toNextLine(bufferedReader);
				System.out.println(line);
				String StartOfTag = "<";
				if(!line.contains(StartOfTag)){
				character = character.concat(line);
				}
				//else{
					//int tagPosition = line.indexOf(StartOfTag);
					//character = character.concat(line.substring(0,tagPosition));
					//return character;
					//break;
				//}
				patternCharacter = Pattern.compile(characterPatternEnd,Pattern.DOTALL);
				matcherCharacter = patternCharacter.matcher(line);
			}
		int groupForCharacter = 1;
		character = character.concat(matcherCharacter.group(groupForCharacter));
		entity.setCharacter(character);
		line = line.replaceFirst(matcherCharacter.group(groupForCharacter),emptyString);
		return line;
	}
	private String simpleAddCharacter(String line, Entity entity, Matcher matcherCharacter) {
		String character = matcherCharacter.group(1);
		entity.setCharacter(character);
		line = line.replaceFirst(character,emptyString);
		return line;
	}
	private Entity getEntity(BufferedReader bufferedReader){
		Entity entity = new Entity();
		String line = toNextLine(bufferedReader);
		entity = getNewEntity(bufferedReader, line,0,null);
		return entity;
	}
	private String toNextLine(BufferedReader bufferedReader) {
		String line = null;
		try {   
			if ((line = bufferedReader.readLine()) != null) {
				Pattern pattern = Pattern.compile(separators,Pattern.DOTALL);
				Matcher matcher = pattern.matcher(line);
				if (line.isEmpty()||matcher.matches()){
					toNextLine(bufferedReader);
				}
			}
		} catch (IOException e){
			 e.printStackTrace();
		}
		return line;
	}

	private String remove(String line,Entity entity,BufferedReader bufferedReader){
		String name = entity.getName();
		String OpeningTag = "<"+ name +">";
		String ClosingTag = "</"+ name +">";
		String stringToRemove = OpeningTag+"(.*)"+ClosingTag;
		System.out.println(stringToRemove);
		Pattern patternToRemove = Pattern.compile(stringToRemove);
		Matcher matcherToRemove = patternToRemove.matcher(line);
		System.out.println(patternToRemove.pattern());
		if(matcherToRemove.find()){
			line = line.replace(matcherToRemove.group(),emptyString);
		}
		else{
			String stringToRemoveStart = OpeningTag+"(.*)";
			Pattern patternToRemoveStart = Pattern.compile(stringToRemoveStart);
			Matcher matcherToRemoveStart = patternToRemoveStart.matcher(line);
			if(matcherToRemoveStart.find()){
				String stringToRemoveEnd = "([^("+ClosingTag+")]?"+ClosingTag+")";
				Pattern patternToRemoveEnd = Pattern.compile(stringToRemoveEnd);
				Matcher matcherToRemoveEnd = patternToRemoveEnd.matcher(line);
				while(!matcherToRemoveEnd.find()){
					line = goToNextLine(bufferedReader, line);
				}
				line = line.replace(matcherToRemoveEnd.group(), emptyString);
			}
		}
				//line = line.replace(arg0, arg1)
		//String stringToRemoveStart = OpeningTag+"(.*)";
		//String stringToRemoveEnd = "([^("+ClosingTag+")]?"+ClosingTag+")";
		//Pattern patternToRemoveStart = Pattern.compile(stringToRemoveStart);
		//Matcher matcherToRemoveStart = patternToRemoveStart.matcher(line);
		//if(matcherToRemoveStart.matches())
		//line = line.replace(arg0, arg1)
		return line;
	}

	public Entity parse() {
		Entity entity = null;
		String file = "src"+File.separator +"main" +File.separator +"resources"+ File.separator + "resource.xml";
		BufferedReader bufferedReader = null;
		try {   
			bufferedReader = new BufferedReader(new FileReader(file));
			entity = getEntity(bufferedReader);

		} catch (IOException e){
			 e.printStackTrace();
		} finally {
			if (bufferedReader != null) {
				try {
					bufferedReader.close();
				} catch (IOException e) {    
					e.printStackTrace();
				}   
			}  
		}
		return entity;
	}

}
