package by.tc.task02.dao.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import by.tc.task02.dao.EntityDAO;
import by.tc.task02.entity.Entity;

public class EntityDAOImpl implements EntityDAO {
	
	
	private static final String emptyString = "";
	private static final String openingTagPattern = "<(([a-z-A-Z_:]+)([^><]*))>";
	private static final String closingTagPattern = "</(([a-z-A-Z_:]+)([^><]*))>";
	private static final String characterPattern = ">(.*)<";
	private static final String characterPatternStart = ">(.*)$";
	private static final String characterPatternEnd = "([^<]+)<";
	private static final String separators = "[ \\t\\n\\x0B\\f\\r]+";
	//private static ArrayList<Entity>oldEntities = new ArrayList<Entity>();
	
	private boolean isLineContainOpeningTag(String line){
		Pattern patternOpeningTag = Pattern.compile(openingTagPattern,Pattern.DOTALL);
		Matcher matcherOpeningTag = patternOpeningTag.matcher(line);
		if(matcherOpeningTag.find()&&!matcherOpeningTag.group(1).isEmpty()){
			return true;
		}
		return false;
		
	}
 	private Entity getNewEntity(BufferedReader bufferedReader, String line,int level,String oldName){
		String name = null;
		level++;
		System.out.println(level);
		Entity entity = new Entity();
		while(!isLineEmpty(line)){
			Pattern patternOpeningTag = Pattern.compile(openingTagPattern,Pattern.DOTALL);
			Matcher matcherOpeningTag = patternOpeningTag.matcher(line);
			line = goToNextLine(bufferedReader, line);
			//Entity oldEntity = new Entity();
			//ArrayList<Entity>oldEntities = new ArrayList<Entity>();
			

			while(matcherOpeningTag.find()&&!matcherOpeningTag.group(1).isEmpty()){
				
				System.out.println(entity + "         to Add to List or not");
				//if(!entity.getName().isEmpty()){
				//	System.out.println(entity + "         to Add to List");
				//	int n = oldEntities.size();
				//	System.out.println(oldEntities+"  List");
				//	oldEntities.add(n,entity);
				//	System.out.println(oldEntities+" List");
				//	entity = new Entity();
				//}
				
				name = matcherOpeningTag.group(2);
				String attributesString = matcherOpeningTag.group(3);
				if(!name.isEmpty()){
					line = addDataToEntity(bufferedReader, line, name, entity,
							attributesString);
					
					System.out.println(entity + " after adds");
					
					if(closeTag(line,entity.getName())){
						
						System.out.println(entity + " closeTag");
						
						//if(!oldEntities.isEmpty())
						//{
						//	int n = oldEntities.size()-1;
							//System.out.println(n);
							//System.out.println(oldEntities+" List");
						//	oldEntity = oldEntities.get(0);
							//oldEntities.remove(n);
						//	System.out.println(oldEntities+" List");
						//	oldEntity.setNewEntity(entity);
						//	System.out.println(entity + " beffor return with lists");
						//	return oldEntity;
						//}
						System.out.println(entity + " beffor return");
						return entity;
					}

					line = goToNextLine(bufferedReader, line);

					while(isLineContainOpeningTag(line)){
						System.out.println(entity + " beffor newGetEntity");
						
						Entity newEntity = getNewEntity(bufferedReader,line,level,name);
						System.out.println(newEntity + " after return  newEntity");
							if((newEntity.getName()!=null)){
								System.out.println(entity + " oldEntity");
								entity.setNewEntity(newEntity);
								System.out.println(entity + " oldEntity + neEntity");
								
							}
						System.out.println(line + " oldEntity + neEntity");
						line = remove(line, newEntity, bufferedReader);
						System.out.println(line + " remove this5");
						line = goToNextLine(bufferedReader, line);
						System.out.println(line + " remove this");
					}
				}
			}
			System.out.println(line + "bhjnm,.b");
			if(closeTag(line,entity.getName())){
				System.out.println(entity + " closeTag");
				//if(!oldEntities.isEmpty())
				//{
				//	int n = oldEntities.size()-1;
				//	System.out.println(n);
				//	System.out.println(oldEntities+" List");
				//	oldEntity = oldEntities.get(0);
					//oldEntities.remove(n);
				//	oldEntity.setNewEntity(entity);
				//	System.out.println(oldEntities+" List");
				//	System.out.println(entity + " beffor return 2 with lists");
				//	return oldEntity;
				//}
				//System.out.println(line + " beffor return  2");
				System.out.println(entity + " beffor return  2");
				return entity;
			}
		}
		System.out.println(entity + " beffor return 3 final");
		return entity;
	}
	private String goToNextLine(BufferedReader bufferedReader, String line) {
		Pattern patternSeparators = Pattern.compile(separators,Pattern.DOTALL);
		Matcher matcherSeparators = patternSeparators.matcher(line);
		while(isLineEmpty(line)||matcherSeparators.matches()){
			//line = emptyString;
			line = toNextLine(bufferedReader, line);
			matcherSeparators = patternSeparators.matcher(line);
		}
		return line;
	}
		
	private boolean isLineEmpty(String line){
		Pattern patternSeparators = Pattern.compile(separators,Pattern.DOTALL);
		Matcher matcherSeparators = patternSeparators.matcher(line);
		if(matcherSeparators.matches()||line.isEmpty()){
			
			return true;
		}
		return false;
	}
	
	private String addDataToEntity(BufferedReader bufferedReader, String line,
			String name, Entity entity, String attributesString) {
		entity.setName(name);
		if(!attributesString.isEmpty()){
			line = addAttributes(line, entity, attributesString);
		}
		line = addCharacter(line, entity, bufferedReader);
		return line;
	}

	private String toNextLine(BufferedReader bufferedReader, String line) {
		try { 
			System.out.println(line + "2empty");
			line = bufferedReader.readLine();
			System.out.println(line + "3empty");
		} catch (IOException e){
			 e.printStackTrace();
		}
		System.out.println(line + "7empty");
		return line;

	}
	private boolean closeTag(String line, String Name) {
		Pattern patternCloseTag = Pattern.compile(closingTagPattern);
		Matcher matcherCloseTag = patternCloseTag.matcher(line.replaceAll(separators, emptyString));
		if((matcherCloseTag.find())){
			if(matcherCloseTag.group(1).equals(Name)){
			return true;
			}
			else{
				return false;
			}
		}
		return false;
	}
	private void addOneAttribute(HashMap<String,String> attributesMap,int i, String[]attributes) {
		int indexOfFirstAtribute = 2;
		int j = i-indexOfFirstAtribute;
		String value = attributes[i];
		String attribute= attributes[j];
		attributesMap.put(attribute, value);
	}
	private String addAttributes(String line, Entity entity,String attributesString) {
		String separator = "[=\"]";
		HashMap<String,String> attributesMap = new HashMap<String, String>();
		String[]attributes = attributesString.split(separator);
		int countOfAttributes = attributes.length-1;
		int step = 3;
		int indexOfFirstAtribute = 2;
		for (int i = countOfAttributes; i>=indexOfFirstAtribute; i-=step){

			addOneAttribute(attributesMap,i,attributes);
			entity.setAttributes(attributesMap);
		}
		return line;
	}
	private String addCharacter(String line, Entity entity,BufferedReader bufferedReader) {
		Pattern patternCharacter = Pattern.compile(characterPattern,Pattern.DOTALL);
		Matcher matcherCharacter = patternCharacter.matcher(line);
		if(matcherCharacter.find()){
			line = simpleAddCharacter(line, entity, matcherCharacter);
		}else{
			line = addCharacterFromNewLine(line, entity, bufferedReader);
		}
		return line;
	}
	private String addCharacterFromNewLine(String line, Entity entity, BufferedReader bufferedReader) {
		Pattern patternCharacter;
		Matcher matcherCharacter;
		patternCharacter = Pattern.compile(characterPatternStart,Pattern.DOTALL);
		matcherCharacter = patternCharacter.matcher(line);
		if(matcherCharacter.find()){
			int groupOfCharacter = 1;
			String character = matcherCharacter.group(groupOfCharacter);
			line = addLinesToCharacter(entity, bufferedReader, character, line );
		}
		return line;
	}
	private String addLinesToCharacter(Entity entity, BufferedReader bufferedReader, String character,String line) {
		Pattern patternCharacter;
		Matcher matcherCharacter;
		line = toNextLine(bufferedReader,line);
		patternCharacter = Pattern.compile(characterPatternEnd,Pattern.DOTALL);
		matcherCharacter = patternCharacter.matcher(line);
			while(!matcherCharacter.find()){
				String StartOfTag = "<";
				if(!line.contains(StartOfTag)){
				character = character.concat(line);
				}
				line = toNextLine(bufferedReader,line);
				patternCharacter = Pattern.compile(characterPatternEnd,Pattern.DOTALL);
				matcherCharacter = patternCharacter.matcher(line);
			}
		int groupForCharacter = 1;
		character = character.concat(matcherCharacter.group(groupForCharacter));
		entity.setCharacter(character);
		line = line.replaceFirst(matcherCharacter.group(groupForCharacter),emptyString);
		return line;
	}
	private String simpleAddCharacter(String line, Entity entity, Matcher matcherCharacter) {
		String character = matcherCharacter.group(1);
		entity.setCharacter(character);
		line = line.replaceFirst(character,emptyString);
		return line;
	}
	private Entity getEntity(BufferedReader bufferedReader){
		Entity entity = new Entity();
		String line = toNextLine(bufferedReader);
		entity = getNewEntity(bufferedReader, line,0,null);
		return entity;
	}
	private String toNextLine(BufferedReader bufferedReader) {
		String line = null;
		try {   
			if ((line = bufferedReader.readLine()) != null) {
				Pattern pattern = Pattern.compile(separators,Pattern.DOTALL);
				Matcher matcher = pattern.matcher(line);
				if (line.isEmpty()||matcher.matches()){
					toNextLine(bufferedReader);
				}
			}
		} catch (IOException e){
			 e.printStackTrace();
		}
		return line;
	}

	private String remove(String line,Entity entity,BufferedReader bufferedReader){
		String name = entity.getName();
		String OpeningTag = "<"+ name;
		String ClosingTag = "</"+ name +">";
		System.out.println(ClosingTag + " empty");
		String stringToRemove = OpeningTag+"(.*)"+ClosingTag;
		Pattern patternToRemove = Pattern.compile(stringToRemove);
		Matcher matcherToRemove = patternToRemove.matcher(line);
		if(matcherToRemove.find()){
			//System.out.println(line + " remove");
			line = line.replace(matcherToRemove.group(),emptyString);
			//System.out.println(line + " remove");
		}
		else{
			line = goToNextLine(bufferedReader,line);
			/*String stringToRemoveStart = OpeningTag+"(.*)";
			Pattern patternToRemoveStart = Pattern.compile(stringToRemoveStart);
			Matcher matcherToRemoveStart = patternToRemoveStart.matcher(line);
			if(matcherToRemoveStart.find()){
				String stringToRemoveEnd = ClosingTag;
				Pattern patternToRemoveEnd = Pattern.compile(stringToRemoveEnd);
				Matcher matcherToRemoveEnd = patternToRemoveEnd.matcher(line);
				int i = 0;
				while(!matcherToRemoveEnd.find()){
					i++;
					System.out.println(i);
					line = emptyString;
					try { 
						System.out.println(line + "2empty");
						line = bufferedReader.readLine();
						System.out.println(line + "3empty");
					} catch (IOException e){
						 e.printStackTrace();
					}
					//line = goToNextLine(bufferedReader,line);
					System.out.println(line + " empty");
					matcherToRemoveEnd = patternToRemoveEnd.matcher(line);
				}
				line = line.replace(matcherToRemoveEnd.group(), emptyString);
			}*/
		}
		//System.out.println(line + " remove");
		return line;
	}

	public Entity parse() {
		Entity entity = null;
		String file = "src"+File.separator +"main" +File.separator +"resources"+ File.separator + "resource.xml";
		//dir.
		BufferedReader bufferedReader = null;
		try {   
			bufferedReader = new BufferedReader(new FileReader(file));
			entity = getEntity(bufferedReader);

		} catch (IOException e){
			 e.printStackTrace();
		} finally {
			if (bufferedReader != null) {
				try {
					bufferedReader.close();
				} catch (IOException e) {    
					e.printStackTrace();
				}   
			}  
		}
		return entity;
	}

}
